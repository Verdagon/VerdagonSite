<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
   <channel>
      <title>Languages and Architecture</title>
      <link>https://verdagon.dev/</link>
      <description>A blog on programming languages, software architecture, and Evan Ovadia's other shenanigans!</description>
      <lastBuildDate>Mon, 21 Mar 2022 16:15:00 -0400</lastBuildDate>
      <category>Software/</category>
      <category>Software Architecture</category>
      <category>Programming Languages</category>
      <category>Vale Programming Language</category>
      <copyright>Copyright 2022 Evan Ovadia</copyright>
      <atom:link href="http://verdagon.dev/rss.xml" rel="self" type="application/rss+xml" />

      <!--docs>http://blogs.law.harvard.edu/tech/rss</docs-->
      <language>en-us</language>
      <pubDate>Mon, 22 Mar 2022 16:15:00 -0400</pubDate>
      <webMaster>noreply@verdagon.dev (Evan Ovadia)</webMaster>
      <!--image>
         <url>http://www.feedforall.com/ffalogo48x48.gif</url>
         <title>FeedForAll Sample Feed</title>
         <link>http://www.feedforall.com/industry-solutions.htm</link>
         <description>FeedForAll Sample Feed</description>
         <width>48</width>
         <height>48</height>
      </image-->


      <item>
         <title>The Link Between Generics, Compile Times, Type-Erasure, Cloud Building, and Hot-Code Reloading</title>
         <guid>https://verdagon.dev/blog/generics-compile-times</guid>
         <link>https://verdagon.dev/blog/generics-compile-times</link>
         <pubDate>Tue, 9 Jun 2023 0:00:00 -0500</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <title>What Vale Taught Me About Linear Types, Borrowing, and Memory Safety</title>
         <guid>https://verdagon.dev/blog/linear-types-borrowing</guid>
         <link>https://verdagon.dev/blog/linear-types-borrowing</link>
         <pubDate>Tue, 1 Jun 2023 11:04:00 -0500</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <title>An Unexpected Quest in Implementing Vale's Region Borrowing</title>
         <guid>https://verdagon.dev/blog/making-regions-part-2-generics</guid>
         <link>https://verdagon.dev/blog/making-regions-part-2-generics</link>
         <pubDate>Tue, 9 May 2023 13:04:00 -0600</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <title>How To Survive Your Project's First 100,000 Lines</title>
         <guid>https://verdagon.dev/blog/first-100k-lines</guid>
         <link>https://verdagon.dev/blog/first-100k-lines</link>
         <pubDate>Tue, 2 May 2023 11:15:00 -0600</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <title>How Memory Safety Approaches Speed Up and Slow Down Development Velocity</title>
         <guid>https://verdagon.dev/blog/when-to-use-memory-safe-part-2</guid>
         <link>https://verdagon.dev/blog/when-to-use-memory-safe-part-2</link>
         <pubDate>Mon, 16 Jan 2023 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <title>Implementing a New Memory Safety Approach, Part 1</title>
         <guid>https://verdagon.dev/blog/making-regions-part-1-human-factor</guid>
         <link>https://verdagon.dev/blog/making-regions-part-1-human-factor</link>
         <pubDate>Wed, 22 Nov 2022 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <title>Zero-Cost Memory Safety with Vale Regions (Preview)</title>
         <guid>https://verdagon.dev/blog/zero-cost-borrowing-regions-overview</guid>
         <link>https://verdagon.dev/blog/zero-cost-borrowing-regions-overview</link>
         <pubDate>Wed, 16 Nov 2022 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>


      <item>
         <title>Hash Codes, Non-Determinism, and Other Eldritch Horrors</title>
         <guid>https://verdagon.dev/blog/generics-hash-codes-horrors</guid>
         <link>https://verdagon.dev/blog/generics-hash-codes-horrors</link>
         <pubDate>Wed, 9 Nov 2022 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/when-to-use-memory-safe-part-1</guid>
         <link>https://verdagon.dev/blog/when-to-use-memory-safe-part-1</link>
         <pubDate>Fri, Oct 7 2022 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <title>When to Use Memory Safe Languages, Part 1: Safety in Non-Memory-Safe Languages</title>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/perfect-replayability-prototyped</guid>
         <link>https://verdagon.dev/blog/perfect-replayability-prototyped</link>
         <pubDate>Thu, 28 June 2022 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Perfect Replayability</title>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/fearless-ffi</guid>
         <link>https://verdagon.dev/blog/fearless-ffi</link>
         <pubDate>Thu, 21 June 2022 10:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Vale's Fearless FFI, for Safer Dependencies and Supply-Chain Attack Mitigation</title>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/version-0.2-released</guid>
         <link>https://verdagon.dev/blog/version-0.2-released</link>
         <pubDate>Thu, 12 May 2022 12:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Vale 0.2 Released: Higher RAII, Concept Functions, Const Generics, FFI, Modules, Faster Compiles, set Keyword</title>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/concept-functions</guid>
         <link>https://verdagon.dev/blog/concept-functions</link>
         <pubDate>Wed, 29 Apr 2022 11:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Added to Vale 0.2 Beta: Concept Functions</title>
         <description>Like traits, but way more straightforward!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/const-generics-spread</guid>
         <link>https://verdagon.dev/blog/const-generics-spread</link>
         <pubDate>Wed, 27 Apr 2022 12:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Const Generics and the Compile Time Spread Operator</title>
         <description>A compile-time for-each operator!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/on-removing-let-let-mut</guid>
         <link>https://verdagon.dev/blog/on-removing-let-let-mut</link>
         <pubDate>Wed, 20 Apr 2022 12:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>On Removing Let and Let Mut</title>
         <description>So small a thing, yet such an improvement!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/yak-shave-language-engine-game</guid>
         <link>https://verdagon.dev/blog/yak-shave-language-engine-game</link>
         <pubDate>Thu, 4 Apr 2022 12:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>A Tale of Yak Shaving: Accidentally Making a Language, for an Engine, for a Game</title>
         <description>The longest yak-shave in history!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/surprising-weak-refs</guid>
         <link>https://verdagon.dev/blog/surprising-weak-refs</link>
         <pubDate>Thu, 31 Mar 2022 16:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Surprising Weak-Ref Implementations: Swift, Obj-C, C++, Rust, and Vale</title>
         <description>Such shenanigans, right under our noses!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/higher-raii-7drl</guid>
         <link>https://verdagon.dev/blog/higher-raii-7drl</link>
         <pubDate>Mon, 22 Mar 2022 16:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Vale's Higher RAII, the pattern that saved me a vital 5 hours in the 7DRL Challenge</title>
         <description>How a language can enforce that we call an arbitrary function before destroying an object.</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/seamless-fearless-structured-concurrency</guid>
         <link>https://verdagon.dev/blog/seamless-fearless-structured-concurrency</link>
         <pubDate>Mon, 21 Mar 2022 16:15:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Seamless, Fearless, and Structured Concurrency</title>
         <description>We can combine the best parts of different structured concurrency approaches!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>


      <item>
         <guid>https://verdagon.dev/blog/generational-references</guid>
         <link>https://verdagon.dev/blog/generational-references</link>
         <pubDate>Tue, 5 Jan 2021 12:00:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Generational References</title>
         <description>2.3x faster than reference counting, unoptimized!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>


      <item>
         <guid>https://verdagon.dev/blog/hybrid-generational-memory</guid>
         <link>https://verdagon.dev/blog/hybrid-generational-memory</link>
         <pubDate>Sat, 2 Jan 2021 12:00:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Vale's Hybrid-Generational Memory</title>
         <description>For speed and simplicity!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>


      <item>
         <guid>https://verdagon.dev/blog/zero-cost-refs-regions</guid>
         <link>https://verdagon.dev/blog/zero-cost-refs-regions</link>
         <pubDate>Wed, 29 Jul 2020 12:00:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>Zero-Cost References with Regions in Vale</title>
         <description>Watch regions eliminate reference-counting overhead!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>

      <item>
         <guid>https://verdagon.dev/blog/raii-next-steps</guid>
         <link>https://verdagon.dev/blog/raii-next-steps</link>
         <pubDate>Wed, 15 Jul 2020 12:00:00 -0400</pubDate>
         <category>Programming Languages</category>
         <category>Vale Programming Language</category>
         <title>The Next Steps for Single Ownership and RAII</title>
         <description>How constraint references enable easy safety, speed, and much more powerful RAII!</description>
         <author>noreply@verdagon.dev (Evan Ovadia)</author>
      </item>
   </channel>
</rss>
