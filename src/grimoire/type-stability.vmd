---
title: Type Stability
subtitle: Part 2 of the Memory Safety Grimoire
realm: grimoire
path: grimoire/grimoire
layout: annotated
namespace: c-blog m-annotated
---


Type stability lets us have memory safety without the usual costs! It doesn't have:

 * Garbage collection's run-time pauses [#gcistgc]
 * Reference counting's incrementing and decrementing costs
 * A borrow checker's extra copies or bounds checking [#bounds]
 * Generational references' generation checks


With type stability, it is *memory-safe to mutably alias any object,* [#mutablyalias] which makes our programs wonderfully easy to write.


Keep reading to learn how it works, and where Vale will use it to make our programs faster.


# What is Type Stability?

## Simple Type Stability

Imagine we had a basic C program that used `malloc`, but had a special `free` function that, instead of returning the memory to the OS, just adds it to a free-list specifically for that object's type.


We say that every allocation in this system is "type stable", because its memory is *only ever reused for the same type.*


Our program is now *memory safe*, because even if we accidentally use-after-free, we're accessing something of the same type as the original object.


<slice>
#mutablyalias: To mutably alias an object means we can have multiple references to an object, and can use any of them to modify the object.

#gcistgc: In this page, when we say GC, we mean tracing garbage collection.

#bounds: A common strategy for working with the borrow checker is to put objects in a centrally reachable collection such as `Vec` or `HashMap`, and refer to it with an index or ID. To "dereference" that index or ID, we need to perform a bounds check.
</slice>

## This is familiar!

We do something similar to this with arrays in C, C++, and Rust all the time!


<<<<
Here's an example in C++.


We have a vector of `Spaceship`, and a local `int myShipIndex` which refers to a specific ship.


Then, we remove the Spaceship from the array. `myShipIndex` now refers to a Spaceship that doesn't exist, it's a "dangling index" so to speak.


But if we _do_ accidentally use `myShipIndex` to index into the array, it's still memory safe, because we're still accessing a `Spaceship`.


This is a great alternative to reference counting or tracing garbage collection, because the only run-time overhead is a bounds-check, whenever we want to "dereference" the index.


This is also a common technique in Rust, as the borrow checker recognizes it as a memory-safe pattern.
////
```c++
struct Engine {
  int fuel;
  // ... (constructor, etc.)
};
struct Spaceship {
  Engine engine;
  // ... (constructor, etc.)
};
int main() {
  vector<Spaceship> ships;
  // ... (add initial ships, etc.)

  // Add our new ship:
  int myShipIndex = ships.size();
  ships.emplace_back(
      Spaceship(Engine(30)));

  // Destroy the ship.
  ships.pop_back();
  // Now, myShipIndex is "dangling"

  // ... (perhaps even replace it)

  // Using myShipIndex is weird, but
  // it's still memory safe!
  int fuel =
    ships[myShipIndex].engine.fuel;
  cout << fuel << endl;
}
```
>>>>


Our simple `malloc` + free-list strategy above is similar; if we use-after-free, we're still accessing something of the same type, so it's memory safe.

<slice/>


# The Benefits

We've explained only simple type-stable approach so far, but we already see a lot of benefits.


*There's no aliasing costs.*

In some approaches like reference counting, we need to store a counter for every object, to increment it whenever we make a new reference, and decrement it whenever we release a reference.

That counter makes sure that we don't give an object back to `free` until we're sure that there are no more references to it, to prevent use-after-free.

However, with type-stability, use-after-free is memory-safe, so it doesn't need a counter!


*There's no run-time pauses.*

With tracing garbage collection, we occasionally need to freeze the current thread, so we can see what objects the thread can indirectly reach, so it can reuse all the unreachable memory.

Tracing garbage collection will make sure that we don't reuse an object's memory until nothing can indirectly access it, and therefore don't use-after-free.

However, with type-stability, use-after-free is memory-safe, so it doesn't need a tracing garbage collector!


*There's no extra copies or bounds checking.*

In Rust, the borrow checker's lack of mutable aliasing often means we store our objects in a centrally reachable place, usually a `Vec` or a `HashMap`.

This is a useful design pattern, but it does incur a bounds-check whenever we need to "dereference" the index or key to get a reference to the object. [# In idiomatic Rust, if we need to refer to an object for longer than a certain scope, or while someone else might mutate it, we generally must refer to it via an index or an ID.] This bounds-checking is fortunately usually fairly cheap, but [sometimes it can add up](https://ceronman.com/2021/07/22/my-experience-crafting-an-interpreter-with-rust/).

Another workaround is to copy data, instead of putting it in a centrally reachable place.

However, with type-stability, it's safe to mutably alias objects, so it doesn't need to incur bounds checking or copying costs!


*There's no dereferencing costs.*

With [generational references](/vision/safety-1-generational-references), we sometimes have to "generation check", to assert that our reference's generation matches the allocation's current generation which is changed whenever the object is `free`d.

That assertion will make sure we don't access an object after it's `free`d, because use-after-free is normally memory-unsafe.

However, with type-stability, use-after-free is memory-safe, so we don't need to assert anything!

This page explains how type stability is an _alternative_ to generational references. However, Vale actually combines generational references and type stability for its [hybrid-generational memory](/vision/speed-6-hybrid-generational-memory).


Type stability also has some drawbacks, which we'll explain further below. First, let's explore how Vale uses type-stability to speed up our programs.

<slice/>
