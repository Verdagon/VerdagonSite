Add these to future-articles.vmd, both in the subsections and the graph

(none right now)


# Graveyard

Here's some articles that we decided not to write about.

Misc:

 * "using defer for more than just function scope" talking about how we can do higher raii and its way better. nope, nobody cares about defer.

Boring:

 * Its harder to optimize assembly because dont know types, and that one weird C rule about structs
 * an article on structural subtyping in vale?

No substance to write about:

 * "Moving the borrow checker upward" (regions)
 * article on choosing to keep looking for better solns, which led to pre and live. talk about how its a good thing to not be satisfied with the status quo. the only way to improve on today's tools is to realize their imperfections, weaknesses, and missed opportunities
 * The Curse of Knowing Too Many Programming Languages
 * "7 interesting facts i learned while writing a compiler" they dont even have to be about compilers, could even be random BS learned from my server lol

Too antagonistic:

 * "fearless concurrency without the borrow checker"
 * "simple, fast, safe future alternatives to Rust" talk about vale, verona, forty2, val

Bigger ones below.

## Talking about FP

article on experimenting with FP for a few years, and my takeaways

talk about the workarounds
shared mutability is inevitable

the similarity between FP and rust, in that they force you to declare all side effects, and the benefits and drawbacks of that

don't do this, because we aren't really that good at FP.


## Why memory safety is the wrong goal

talk about the privacy problem with arrays.

talk about identity safety

talk about generational arena. perhaps link to moldavis' comments

then maybe talk about vale

dont do this, because vale doesnt really help as much as we'd like. we can do random generational indices, but we can still index into things.



## Systems Programming

article: "solving the complexity problem in systems programming"
or "low level programming doesnt have to be complex"
(maybe once we have unsafe)
or "making low-level program less complex"

dont do this, because its not clear that vale will do systems programming well.



## On Optimizing for Happiness in Programming Languages

an article about the two joys of programming. talk about the addictive puzzle of perfection, and about the joy of exploration. talk about coder evan and creative evan.

maybe talk about "should we optimize for joy in lang design?" i want to lean no. more complexity often leads to more joy. i like rust best of any language, but its the wrong call for a lot of situations. instead we should optimize for less friction.

we like a certain amount of complexity. nobody likes playing tic tac toe. a lot of people like playing zelda. we shouldnt needlessly add complexity to the language though. we could do that for a hobby language, not a real one.


lets not talk about this. it doesnt land well with monkey.



# How Rust Inspired New Programming Languages

talk about austral, vale

cant really, its hard to say for sure that rust inspired them.




# Overcoming Biases and Irrationality in Designing a Programming Language

talk about my own biases and how they manifest, and how i detect them.

basically bring forth a lot of hpmor stuff.

also talk about holding extremes too high perhaps. i am too extreme that coupling is bad. its a valid viewpoint, but when it becomes a bias, it starts to blind me to things. (come up with examples)

maybe talk about how i was solving the wrong problem with OO, kind of. my kind of OO still has a fragile base class problem, but in the form of a misapplied strategy pattern

lets not actually, kinda boring and dry and not really doing anything for us.



# On Replacing C++ (ORCPP)

also, do we really want to replace C++? if c++ is shrinking, then we want to replace its replacement. if it's growing, then do we really need to replace it? i wonder.

first read https://www.reddit.com/r/rust/comments/w2tygg/carbon_language_an_experimental_successor_to_c/ and https://www.reddit.com/r/programming/comments/w2thvo/carbon_an_experimental_c_successor_language/ and https://news.ycombinator.com/item?id=32151609

carbon: could replace c++, though itll be hard for them to add memory safety.

vale: could replace c++ for the higher level use cases. servers, cross platform code, etc. it's a bit better than rust because it's easier and more flexible.

odin: "Odin isn't really meant to replace C++ though, it's meant to replace C. It does have several higher-level features though that makes it a really good in-between for C++ and C as well, but it mainly sticks to C-land. Mainly its type system, modern design, and quality-of-life changes make it way better than C" - Foxify

zig: a lot of people use c++ as c-with-templates. zig could do pretty well here.

rust: could replace it. there are a lot of articles about it, so i wont go too deeply into it here.

talk about its pretty hard to replace c++, especially since it's used for so much. but between a bunch of other languages, we'll probably be able to replace it for new projects.

not gonna write about it because i just dont care about replacing c++. its a silly thing that has no meaning or purpose. if anything we'd write about making things more memory safe, and i think thats possible for c++ so its hard to write about replacing it.

