---
title: On Removing Let and Let Mut
author: Evan Ovadia
date: Apr 17, 2022
realm: blog
path: blog/on-removing-let-let-mut
layout: annotated
namespace: c-blog m-annotated
sponsor: us
---

We're going to commit a cardinal sin today and talk about *syntax design!* [# Normally we talk about new memory management schemes, yak shaving contests, and other nonsense. It feels weird to be talking about something other people usually talk about!]


<div><img src="/images/bikeshed.jpg" width="100%" style="opacity: .8"/><center><span style="opacity: .8"><a href="https://en.wikipedia.org/wiki/Law_of_triviality">(Also, while we have you here, what color should we paint this shed?)</a></span></center></div>


We often think that there are only three alternatives for variable declaration:

 * One keyword to declare a variable, such as:
    * In C++, `auto x = 4;`
    * Swift's `var x = 4`
    * Go's `x := 4` (though it's not really a keyword per se)
 * Specifying whether the variable can change, such as:
    * Rust's `let x = 4;` vs `let mut x = 4;`
    * Javascript's `let x = 4` vs `const x = 4`
 * Leaving it off completely, such as:
    * Python's `x = 4`


The previous version of [Vale](https://vale.dev/) used the second option, `let` and `let mut`. [# Vale is a language that aims to be fast and memory-safe, while still being easy to learn. This syntax change helps with that!]

However, it recently changed to a fourth option, which was so nice that it became the default behavior in version 0.2.


<slice/>


# The Fourth Option

Most languages can't just use `x = 4;`, because that already meant something; that's the *re-assignment statement*, which modify an existing variable that we already declared.

And alas, Python tried combining those two statements. It didn't go well. [# This leads to problems; if you rename your `x = 1;` declaration to `y = 1;`, but forget to modify `x = 42;` re-assignment below, you now accidentally have two variables!]


However, there's another option here: *let's change the re-assignment statement!*


<<<<
Instead of this:

```vale
func main() {
  let a = 3;
  let b = 3;
  let c = 3;
  let mut d = 3;
  d = 7;
  println(d);
}
```stdout
7
```
////
We can have this:

```vale
func main() {
  a = 3;
  b = 3;
  c = 3;
  d = 3;
  set d = 7;
  println(d);
}
```stdout
7
```
>>>>

In other words, `x = 3;` declares a variable, and `set x = 42;` re-assigns it.


It was odd at first, but after using it for a few weeks, we think this is a huge improvement.


Syntax design can be a tricky endeavor. When exploring new syntax, we had to suppress the knee-jerk "unfamiliarity avoidance", and actually experiment. Without experimenting, it's easy to get stuck with what's familiar, even if there are better options.


<slice/>


# Why We Like It

To our great surprise, we've found that *our codebases have a lot more declarations than re-assignments,* so it makes sense to require the extra keyword on re-assignments because they're rarer.


We sampled three Vale projects. One had 111 declarations, and only 35 re-assignments. That's only *21%* re-assignments! The other two were even lower, at *20%* and *6%*.

This isn't just Vale either. A randomly chosen Rust library, [Rocket](https://github.com/SergioBenitez/Rocket), had about *8%*. [#rocket]


*When did this happen?* We used to re-assign variables all the time!

<slice>
#rocket: This is approximate; I used `let(\s+mut)?` (4437 results) and `^\s*[\w\[\]\.]+\s*[\+\-\*\/]?=\s+` (351 results) and which may have missed some corners, such as lambdas and mutating call returned values.

Parsing with regular expressions is fun!
</slice>


We suspect three things contributed to this shift over the past couple decades.


First, we no longer need re-assignment to return a value from an if-statement. Compare these two snippets in Scala:

<<<<
```scala
var weight = 0
if (i_am_a_potato) {
  weight = 42
} else {
  weight = 73
}
```
////
```scala
val weight =
  if (i_am_a_potato) {
    42
  } else {
    73
  }
```
>>>>

Second, our for-loops became foreach loops, removing that pesky `i++`:

<<<<
```java
for (int i = 0; i < ships.size(); i++) {
  ships[i].launch();
}
```
////
```java
for (Spaceship ship : ships) {
  ship.launch();
}
```
>>>>

Third, we loop over collections less, and now use specialized methods like `find` a lot more. Compare these two snippets in Javascript:

<<<<
```js
let foundIndex = -1;
for (let i in ships) {
  if (ships[i].name == "Firefly") {
    foundIndex = i;
  }
}
```
////
```js
let foundIndex =
    ships.findIndex(
        x => (x.name == "Firefly"));
```
>>>>


Either way, we seem to have a lot less re-assignments nowadays, so it makes sense to have the extra keyword on the rarer statement, not the more common one.


<slice/>


# Another Factor

Note how the declaration doesn't specify whether we can change the variable, like `let` vs `let mut`.


One of the benefits of that distinction was that we could easily know whether the variable could change in the future.


<<<<
We actually kept that distinction for a while; we used the `!` symbol, such as `d! = 3;`.

However, we decided to not require it for local variables, because the `set` keyword makes re-assignment more noticeable than it was before.

////

```vale
func main() {
  a = 3;
  b = 3;
  c = 3;
  d! = 3;
  set d = 7;
  println(d);
}
```stdout
7
```
>>>>


For example, if we want to know whether the variable `d = 3;` can change, we just need to look for a `set d = 7;` keyword somewhere in the function, which is much more noticeable now than the previous re-assignment syntax was.


<<<<
However, that reasoning doesn't apply to structs. A struct's members might be modified from various far-flung files in our codebase.
////
```vale
struct MyStruct {
  x! int;
}
```
>>>>

For that reason, we kept the `!` on struct members.


<slice/>


# Conclusion


Of course, we can't generalize too much. Every language is different, so we can't say that every new language should use this new scheme. There are a _lot_ of other factors that come into play in, for example, Rust's variable declaration decisions.

Still, newer languages should give it some thought!



Thanks for visiting, and we hope you enjoyed it!


In the coming weeks, we'll be writing more about our "region borrow checker" which helps eliminate Vale's memory safety overhead, so subscribe to our [RSS feed](https://verdagon.dev/rss.xml) or the [r/Vale](https://reddit.com/r/vale) subreddit, and come hang out in the [Vale discord](https://discord.gg/SNB8yGH)!


If you found this interesting, please consider sponsoring us:

<center>
  <a href="https://github.com/sponsors/ValeLang" class="donate-button">
     <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
        <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
     </svg>
     Sponsor us on GitHub!
  </a>
</center>

With your help, we can write nonsense like this more often!


- Evan Ovadia


<slice new-color="afterword"/>

# About the Vale Language Project

The Vale Language Project is not just about making Vale, it's about *exploring, discovering, and publishing* new programming language mechanisms that enable *speed*, *safety*, and *ease of use.*


*The world needs more exploration here!* Currently, most programming language research is in:

 * High-overhead languages involving reference counting and tracing garbage collection.
 * Complex languages (Ada/Spark, Coq, Rust, Haskell, etc.) which impose a higher complexity burden on the average programmer.

These are useful, but there is a *vast field of possibilities* in between, waiting to be explored!


Our aim is to explore that space, discover what it has to offer, and make *speed and safety easier than ever before.*


In this quest, we've discovered a lot of new techniques:

 * [Region Borrow Checking](/blog/zero-cost-refs-regions), which adds mutable aliasing support to a Rust-like borrow checker.
 * [Generational Memory](/blog/generational-references), for a language to ensure an object still exists at the time of dereferencing.
 * [Hybrid-Generational Memory](/blog/hybrid-generational-memory), which ensures that nobody destroys an object too early, for better optimizations.


These techniques have also opened up some new emergent possibilities:

 * [Seamless concurrency](https://verdagon.dev/blog/seamless-fearless-structured-concurrency), the ability to launch multiple threads that can access any pre-existing data without data races, without the need for refactoring the code or the data.
 * Object pools and bump-allocators that are memory-safe and decoupled, so no refactoring needed.
 * [Fearless FFI](/blog/fearless#safe-externs), which allows us to call into C without risk of accidentally corrupting Vale objects.
 * Deterministic replayability, to record all inputs and replay execution. Goodbye races and heisenbugs!
 * [Higher RAII](/blog/raii-next-steps), a form of linear typing that enables destructors with parameters and returns.


We also gain a lot of inspiration from other languages, and are finding new ways to combine their techniques:

 * We can mix an `unsafe` block with Fearless FFI to make a much safer systems programming language!
 * We can mix Erlang's isolation benefits with functional reactive programming to make much more resilient programs!
 * We can mix region borrow checking with Pony's `iso` to support shared mutability.

...plus a lot more interesting ideas to explore!


The Vale programming language is only one combination of the features we've found. Our goal is to publish all the techniques we've found, even the ones that couldn't fit in Vale, so that other languages can make strides in this area.


Our medium-term goals:

 * Publish the Language Simplicity Manifesto, a collection of principles to keep programming languages' learning curves down.
 * Publish the Memory Safety Grimoire, a collection of "memory safety building blocks" that languages can potentially use to make new memory models, just like Vale combined generational references and scope tethering.
 * Prototype the Region Borrow Checker in Vale, to show the world that shared mutability can work with borrow checking!
 * Prototype Hybrid-Generational Memory in Vale, to see how fast and easy we can make single ownership.


We aim to publish articles biweekly on all of these topics, and inspire the next generation of fast, safe, and easy programming languages.


If you want to support our work, please consider [sponsoring us on GitHub](https://github.com/sponsors/ValeLang)!

With enough sponsorship, we can:

 * Work on this full-time.
 * Turn the Vale Language Project into a 501(c)(3) non-profit organization.
 * Make Vale into a production-ready language, and push it into the mainstream!

<center>
  <a href="https://github.com/sponsors/ValeLang" class="donate-button">
     <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
        <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
     </svg>
     Sponsor us on GitHub!
  </a>
</center>
