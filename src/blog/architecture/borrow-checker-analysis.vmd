

Benefits are, of course, extreme speed and good memory safety! The drawbacks are subtle and pervasive, though.


rust isn't perfect.
http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=rust


- not very resilient to needed changes

borrow checker's &mut and & are leaky abstractions, they force you to propagate them.
lack of encapsulation.

https://golang-nuts.narkive.com/qe8H9kU1/composability-and-leaky-abstractions
a rust function is not as composable as a go function, because that color will change what you do to your caller

https://www.silasreinagel.com/blog/2019/09/03/compose-your-software/
> In uncomposed software, there is no separations of concerns. There typically are problematic crossings of domain boundaries. Leaky abstractions.

https://www.reddit.com/r/rust/comments/2581s5/comment/cheq9fu/?utm_source=reddit&utm_medium=web2x&context=3
> &mut appears to be a very leaky abstraction
(this doesnt seem to really get at what we're talkin about)




1. AxM is worked around too often, it only fits in some cases

2. we can get these same benefits from region borrow checking, which doesnt require an object be AxM

3. we can translate a program to C and it will be just as memory safe. it's a technique, not a groundbreaking new technology.

3. real world rust programs have overhead





There are many patterns in Rust that don't require unsafe. Looping, matching, etc. Is RAII one of them? Does the borrow checker allow RAII?

Most cases of RAII (aside from trivial examples that just assert a contained boolean) affect the outside world. Examples:
- Via FFI; call fclose() on a file, println! to print, free() to deallocate.
- Via RefCell, such as here: https://aloso.github.io/2021/03/18/raii-guards.html
- Via other kinds of unsafe, such as how Rc mutates a counter that lives outside of it.

It seems that these all require some form of escaping the borrow checker. Why is that?

It's because the normal way we accomplish shared mutability within the borrow checker is to hold a "handle", such as an index, and use it to index into a &mut parameter. Here, it might look like:

// Decrements a spaceship's fuel on drop()
struct FuelDecrementer {
  myIndex: usize,
}
fn drop(&mut self, ships: &mut Vec<Spaceship>) {
  ships[self.myIndex].fuel -= 1;
}

However, it's impossible, because drop() can't take additional parameters. So, we're forced into other mechanisms, such as unsafe or RefCell.

Conclusion: the borrow checker doesn't allow RAII; we have to work around the borrow checker to accomplish RAII.




- not much simplicity to be found



goal: rust aint perfect, we can't improve until we know what the drawbacks are.


the borrow checker doesnt let you ____
you must escape it, with rc or unsafe


the problem with rust is that it draws lines that are arbitrary in the big scheme of things. theres no way to know when youre wrong, or you need to work around the borrow checker.



if you return a borrow reference that points into a parameter, youll likely need to copy data out of it.


if you have a vec you can remove things from, youll run into fragmentation there, kind of. sparse stuff. iterating doesnt work as cleanly then.
maybe rule of thumb: if its removable, use the heap?



# Can't Do Various Patterns

We need work arounds like unsafe or RefCell.

Careful about adding either; unsafe kills determinism, RefCell kills pure structured concurrency.

75% of rust programs have unsafe or unsafe dependencies: https://2020.icse-conferences.org/details/icse-2020-papers/68/Is-Rust-Used-Safely-by-Software-Developers-

the safest language is javascript

also, rusts rc isnt as fast as built in rc

- observers. "harmful", nonsense. an index is just a n.o.ref. why add an intermediary? why not two? also, if you push two things to the event queue, and change the world with the first one, the second one might be acting on out of date information. "event queues are good is full of misdirection". why not have two intermediaries? and youre not getting rid of any state, its just now somewhere very far away. we've turned a local complexity into a global one.

- dependency injection. cant do it.

- doubly linked lists, trees w backrefs, graphs. these are pretty common. observers, dependency injection, etc

- RAII is crippled. in c++, we have non-owning refs inside objects so RAII can do its thing. but rust cant have those nor destructor parameters.
- for example, we cant unregister a struct that's listening to messages from a central router
- idiomatic rust cant have raii without unsafe

most important feature in c++: destructors!
https://youtu.be/ltCgzYcpFUI?t=950


"this is how you should have been writing c++" is nonsense. we can have multiple mutable references in the same thread very easily.
(perhaps even show them an example that would go well with region borrow checking?)


# Ergonomics

- most of our refs cant be derefd now lol


# Polymorphism

Imagine having a hierarchy of components. To mock one of them, we have to have a generic parameter. If we have six such mockable components, we will need six generic parameters.


# Centralization

We have to put a bunch stuff in a bunch of central arrays. tbf, this is probably more a problem with single ownership.


# Bounds Checking

When a bunch of stuff is in central arrays, accessing them will always incur a bounds check. If we have a generational arena, we will need both a bounds check and a generation check.

Or worse if we are referring to things by ids we would have to do a hash and perhaps a modulus.



# Shared Mutability Isn't Unsafe

borrow checker is aliasability xor mutability

an even more permissive model would be: aliasability xor deletion
like constraint refs

even more permissive: aliasability xor type changing, allowed to replace a variant with one of same type
like type stability

even more permissive: aliasability xor shape changing, allowed to replace a variant with one of equal shape
like shape stability


## You Cant Escape Shared Mutability Anyway

Indexes!

This thread is full of talking about it: https://www.reddit.com/r/rust/comments/9fqget/jonathan_blow_entity_systems_and_the_rust_borrow/



# Bad Architecture

- encapsulation, everything is virally accessible
- our APIs become brittle, because need more.
- we centralize. if A needs a non-owning ref to B, rust in practice must have a Vec somewhere they can both reach. usually high up.



# Ossified Architecture

Heard this from a guy I interviewed too.

- our architectures ossify, needing more refactors but being harder to refactor


# Difficult to Learn

"Yeah, I could have tried restructuring my code to try to avoid compiler issues. But this would have been even more time spent working around issues with Rust. Go was better than Rust by pretty much every metric that mattered for me, so I went with Go instead." https://news.ycombinator.com/item?id=22336284


this leads to convenient and frustrating ignoring:
"But I can't get past the "Don't look behind the curtain -- oh wait, all the ugly stuff is on this side of the curtain. Umm. Don't look at the ugly stuff, just pretend it isn't there," tone that rust tutorials lead with. (also Haskell)"
https://www.reddit.com/r/rust/comments/i9sor7/comment/g1ilbv0/?utm_source=reddit&utm_medium=web2x&context=3


xxxxx




" I think it brings out the OCD in all of us, because we're apt to believe that the 'hard correctness' is somehow a thing of value. We climbed the mountain and believe that's what 'makes it better' but it may very well be irrelevant. As you say, Java is so often actually 'better' in the big picture." - page 2 of https://news.ycombinator.com/item?id=25799704

Rust is a language of "in theory, yes, but not in practice"

 * There actually is run-time overhead
 * We dont solve NPEs, not really. our non owning refs still might panic on use-after-free. if theyre indices into an array, indexing panics. if we do check, we'll likely expect or unwrap. if not, we likely throw an unrecoverable error. these are references that we expect to exist. one way or another, we'll be checking and likely halting for them.
 * doesnt actually get rid of shared mutability. theres inherent shared mutability, hence IDs.
 * there's inherent state. we sometimes illusion it away like FP by doing transforms. rust and FP both vilify shared mutability, not realizing theyre mimicking it


it doesnt get rid of all bugs. after all, haskell has an even better type system, is even more safe, and still has lots of bugs.
no, it gets rid of *some* of your bugs.
in practice, maybe 1/10 of our bugs reported by QA had some use-after-free. valgrind rocks. so we're taking on these *massive* costs to cut our reported bugs by... 11%.
"but dont you risk all sorts of bad stuff!!" bad stuff is: security, privacy, UX. neither security nor privacy are saved by rust, because rust doesnt force you away from indices. the only true solution here is gc, rc, vale, or outlawing indices/IDs. rust has not solved this. tbh this is why i like that servers use java. and UX isnt harmful, the other 9/10 of our bugs are like that anyway.


Whats rust good for?

 * AAA real-time games that are designed once and thrown away, and veterans have a better idea for next game
    * except, we dont really care about safety that much?

 * distributed online services? no, vales bump allocators will be better. also, those tend to be a little more IO bound right? would suggest GC would work well for them.

 * web assembly? rust is TERRIBLE for apps. maybe the occasional heavy number crunchy stuff?


bad for?

 * servers in general
 * turn based games


State and dependencies should be private in a class, and model should be separated from functionality.


misc:

- they dont make memory safety problems go away completely, they turn them into logic bugs, such as the indexing privacy problem

lots of half-truths and false hype.

seems like we spend a lot of time thinking about how to get around rust's restrictions rather than thinking about what we're actually trying to do


theyre very defensive and aggressive about being the one true way. every criticism starts with "i love rust, but"
- https://www.reddit.com/r/rust/comments/2og8xf/why_rust_started_rather_than_ada/


separation of data and functionality is a lie. whether we have all our model+state in a giant World object, or have it as a hierarchy of objects, is literally the same thing. literally no difference.

they will both want private data to keep implementation details away, so we can change them later. we also need private data to maintain invariants.


"enum/match run-time dispatch"

shared mutability always has a cost. in Yew, they had to have an entire message-passing framework to get around this.
shared mutability is inherent, and it has a cost. the only question is where you pay it.



in rust, if you wrap stuff in a giant World object, and you need to mutate part of it, suddenly you cant hand it around in an imm reference, you need to hand individual parts, because youre mutably borrowing this part.
so, youre forced to separate your data, such that your mutable borrows will block access to as few other things as possible. this often leads to a lot of parallel arrays at the top.
if you really want to pass the world, you will need to take in a mutable reference to the world, and a bunch of IDs of what youre operating on. youll need to do a lot of lookups. this is why we handed generational indices down so far.
See:
- MoveUnitDesire::enact
- AttackUnitDesire::enact
- FireTileComponent::on_turn



the culture:
need better phrase than "hostile kindness"
as soon as you point out that rust's teachings might be wrong, they turn pretty vicious. dont challenge their teachings.



if you use Rc/RefCell, you get around AxM, but you *also* lose single ownership! uh oh


moving checks to compile time is bad for api simplicity: https://blog.burntsushi.net/unwrap/


rust borrow checker can lead to privacy problems: https://news.ycombinator.com/item?id=32240161


async is a nightmare: https://lobste.rs/s/ksj3ii/rust_is_hard_yes_does_it_matter#c_pmrbny


https://news.ycombinator.com/item?id=31794617 great args against rust

Lies we tell ourselves to keep using Golang - https://news.ycombinator.com/item?id=31205072 great points against rust in the comments

discussion of zig v rust: https://lobste.rs/s/veinkw/comparison_rust_zig#c_nmf8jz

read https://news.ycombinator.com/item?id=16659410 and its article https://brandur.org/fragments/rust-brick-walls




weaknesses of rust:
https://lobste.rs/s/jgcvev/why_not_rust

study saying maybe rust isnt safe: https://2020.icse-conferences.org/details/icse-2020-papers/68/Is-Rust-Used-Safely-by-Software-Developers- 75% cannot be completely statically analyzed because of unsafe somewhere in their call chain

not solving problems in the right way, https://news.ycombinator.com/item?id=23437711


https://news.ycombinator.com/item?id=12029238 cant use callback based code

Many who approach the language with optimism [aren't finding the tradeoff worth it](https://news.ycombinator.com/item?id=16659631).

indexes instead: https://www.reddit.com/r/rust/comments/9fqget/jonathan_blow_entity_systems_and_the_rust_borrow/


[called by a public API or a third-party library.](https://news.ycombinator.com/item?id=27249237). [# TODO: unclear, clarify connection] 



So why not make all invariants compile-time invariants? In some cases, it can’t be done. We’ll cover that in the next section. In other cases, it can be done, but one chooses not to for some reason. One such reason is API complexity. https://blog.burntsushi.net/unwrap/

The best approach here is something like HashMap, SlotMap, reference counting, or garbage collection. [Just putting things into a Vec is dangerous](https://news.ycombinator.com/item?id=32240161) and not recommended.

bleed problems, possible in rust, or any language really: https://news.ycombinator.com/item?id=31856436.



is not without some performance costs. The borrow checker's single-ownership nature often encourages us to more often put objects in centralized collections which only grow over time, collections which sometimes have [overhead from bounds-checking](https://ceronman.com/2021/07/22/my-experience-crafting-an-interpreter-with-rust/) and hashing, where in other languages we'd just dereference a reference. Luckily, the time and space overhead for borrow checking is generally _much_ smaller than garbage collection or reference counting.


"it's deeply problematic for a language aiming for wide use in 2022 to not be memory safe" https://news.ycombinator.com/item?id=32782656

"there actually is PL consensus that all new \[general purpose\] languages should be memory-safe" - pcwalton https://news.ycombinator.com/item?id=32783244

"it's completely irresponsible to push a language without a memory safety story, in 2022" - refulgentis, https://news.ycombinator.com/item?id=32777636


rust is not perfect, it has `unsafe`. 75% of all rust crates have `unsafe` somewhere in their dependencies, and anyone who has used `unsafe` knows how hard it can be to prove they are safe.

need integration tests anyway because logic bugs



x I used to believe that garbage collection was always bad, because it had pauses. However, I've learned that ease-of-use and developer velocity are important, and a few of the games I've played wouldn't exist if we couldn't use C# to write games.

x I used to believe that product managers were the enemy, just trying to get us developers to write code faster. Then I worked with some amazing product managers who I could trust to make the right tradeoffs.


privacy moldavi https://news.ycombinator.com/item?id=32240161




In my experience, knowing _how_ to make one's code work within the borrow checker can take a couple months, but knowing _when_ to do it is an art that can take much longer.

. 


Compare this to more flexible languages where you are free to use the best pattern for the situation.


are these good enough for security and privacy? no. are they good enough for finding bugs? Google Earth says yes.



other benefits:
 * compile times

is the rc thing cultural? perhaps. id say it's because the borrow checker is incomplete


i normally talk about vale but will take a break till talk about

premature optimization

static allocation is easier

we should be pushing the world toward memory safety. we should jump on the first system that proves absolute correctness without cost. the system im referring to, of course, is coq.






[Another user says](https://news.ycombinator.com/item?id=31937387), "Too much (compile-time checking) and code becomes so complicated, it's very hard to work with -- you're falling into a [Turing Tarpit](https://en.wikipedia.org/wiki/Turing_tarpit). It becomes easier to just write simple code without bugs, without using all that type system wizardry. But a judicious use of this pattern, where it's appropriate, may be very beneficial."
note this is talking more about static analysis higher than borrow checking


[One user says](https://blog.burntsushi.net/unwrap/), "So why not make all invariants compile-time invariants? In some cases, it can’t be done. ... In other cases, it can be done, but one chooses not to for some reason. One such reason is API complexity."


 * perhaps mention the pass-the-world tendency


intrusive lists: https://news.ycombinator.com/item?id=32907898







Every language chasing both memory safety and speed will need to become more complex as time goes on, because there are always specialized tricks that one can use to get safety and speed in certain specific situations. We invent them all the time. This is why we see such an explosion of techniques in Rust like slotmap and generational indices, GhostCell+QCell, static RC, and so on.

Complexity is inevitable, when one is pursuing memory safety and speed. The real trick in that space is knowing how to do it without sacrificing simplicity. I think the main way to do that is via something I call opt-in complexity, or progressive disclosure. There are three tenets of this:
- Keep the core language simple. You should be able to learn the core tools, and be able to express any program with just those.
- You can opt-in to any of the more complex features. C# does this well with its struct keyword.
- As a bonus: make it so that you can read a program, ignore those syntactical adjustments, and still know what's going on in the program. For example, the register keyword in C from decades ago: if you ignore it, you can still understand what the function does.





https://news.ycombinator.com/item?id=32878477 - "a fully unsafe language in 2022 is dumb"
https://news.ycombinator.com/item?id=32823085 - evangelizing
https://news.ycombinator.com/item?id=32822786 - evangelizing
https://news.ycombinator.com/item?id=32809925 - evangelizing




pinning and intrusive sucks: 
https://lwn.net/SubscriberLink/907876/ac0afc756df0ec71/

> Object initialization in Rust tends to happen on the stack, but objects that need to live indefinitely will need to move to the heap before being pinned. That movement will break a self-referential object, but pinning before initialization will break Rust's memory-safety rules. 
