---
title: Vale's Performance Vision
subtitle: Maximum performance with 100% safety
author: Evan Ovadia
date: Jan 5 2021
realm: blog
path: blog/generational-references
layout: annotated
namespace: c-blog m-annotated
---


There is a wide open field of potential for safety and speed in programming languages. The future is bright!


Today, if one wants to be memory safe, one has two options:

 * Tracing garbage collection, which has nondeterministic pauses, massive memory overhead, and some slowdowns
 * Reference counting, which is even slower, and could have cycles.


There are some situations where it's okay to sacrifice memory safety. In those, the risk of vulnerabilities, bugs, and breaches is acceptable, and we can trade safety for some more speed. For those cases, partially-safe languages can be a great fit. Rust lets us use a borrow checker to reduce our unsafety, Vale has assist and unsafe modes and, C++ has things like address sanitizer to help us identify memory problems at run-time. However, in most cases, we prefer being 100% safe.


We're designing Vale to be the fastest 100%-safe language in existence. This article explains the unique blend of features that will get it there.


# Hybrid Generational Memory

Hybrid generational memory is an entirely new memory model, built on *generational references*. You can find more information [here](/blog/hybrid-generational-memory).

Constraint references and assist mode can be used to drive down the cost even further.


# Read-Only Regions

Read-only regions reduce the overhead even further. We only do a generation check when we read a non-owning reference from a struct.


# Region Allocators

Malloc is notoriously slow. Regions let us use much more powerful allocation strategies, like arenas and pools.


# Conclusion

Rust and C++ can be used to enable these things, but Vale is the only language that brings those into the realm of 100% safety.
